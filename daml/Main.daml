module Main where

import Daml.Script
import Crowdfunding
import DA.Date (addDays, toDateUTC)
import DA.Foldable (forA_)
import DA.Time (days)
import Data
import Endpoints
import DA.Action (void)

typical = script do 
  -- 0. Initializing users
  [alice,bob,judith,jacob] <- forA ["alice","bob","judith","jacob"] initializeUser
  -- 1. Alice creates a CFProject named AliceProject with a deadline in 10 days and a threshold of 1000.
  aliceProjId <- createProject alice "AliceProject" 1000 =<< ((`addDays` 10) . toDateUTC <$> getTime)
  -- 2. Alice contributes herself to the project for 400.
  aliceProjId <- contributeToProject alice aliceProjId 400
  -- 3. Alice sends contribution requests to Bob, Judith and Jacob.
  (aliceProjId, [bobReqId,judithReqId,jacobReqId]) <- sendRequests alice aliceProjId [bob,judith,jacob]
  -- 4. Judith is not interested and refuses the proposal.
  aliceProjId <- rejectRequest judith judithReqId
  -- 5. Bob accepts and gives 500.  
  aliceProjId <- acceptRequest bob 500 bobReqId
  -- 6. Alice checks the current status of her requests.
  debug =<< getRequestsStatus alice aliceProjId
  -- 7. Jacob accepts and gives 300.
  aliceProjId <- acceptRequest jacob 300 jacobReqId
  -- 8. Alice checks the current status of her project.
  debug =<< getProjectStatus alice aliceProjId
  -- 9. Once the deadline has passed, Alice launches the project.
  void $ passTime (days 11) >> launchProject alice aliceProjId

setup = script do

  [alice,bob,judith,jacob] <- forA ["alice","bob","judith","jacob"] initializeUser
  deadline <- (`addDays` 30) . toDateUTC <$> getTime

  aliceProjId <- createProject alice "AliceProject" 100_000 deadline
  bobProjId <- createProject bob "BobProject" 200_000 deadline

  (_,[aliceBobReqId,_]) <- sendRequests alice aliceProjId [bob,judith]
  (bobProjId,bobReqIds) <- sendRequests bob bobProjId [judith]

  liveRequests <- submit bob $ exerciseCmd bobProjId GetRequestsStatus
  debug $ length liveRequests

  judithRequests <- query @ContributionRequest judith

  forA_ (fst <$> judithRequests) $ acceptRequest judith 150_000
  rejectRequest bob aliceBobReqId

  Some (aliceProjId,_) <- queryContractKey @CFProject alice ProjectKey with 
    owner=alice
    name="AliceProject"

  Some (bobProjId,_) <- queryContractKey @CFProject bob ProjectKey with
    owner=bob
    name="BobProject"

  passTime $ days 40
  submit alice $ exerciseCmd aliceProjId Launch
  submit bob $ exerciseCmd bobProjId GetRequestsStatus