module Main where

import Daml.Script
import Crowdfunding
import DA.Date (addDays, toDateUTC)
import DA.Time (days)
import Data
import Endpoints
import DA.Foldable (mapA_)

typical = do 
  -- 0. Initializing users
  [alice,bob,judith,jacob] <- forA ["alice","bob","judith","jacob"] initializeUser
  -- 1. Alice creates a CFProject named AliceProject with a deadline in 10 days and a threshold of 1000.
  aliceProjId <- createProject alice "AliceProject" 1000 =<< ((`addDays` 10) . toDateUTC <$> getTime)
  -- 2. Alice contributes herself to the project for 400.
  aliceProjId <- contributeToProject alice aliceProjId 400
  -- 3. Alice sends contribution requests to Bob, Judith and Jacob.
  (aliceProjId, [bobReqId,judithReqId,jacobReqId]) <- sendRequests alice aliceProjId [bob,judith,jacob]
  -- 4. Judith is not interested and refuses the proposal.
  aliceProjId <- rejectRequest judith judithReqId
  -- 5. Bob accepts and gives 500.  
  aliceProjId <- acceptRequest bob 500 bobReqId
  -- 6. Alice checks the current status of her requests.
  debug =<< getRequestsStatus alice aliceProjId
  -- 7. Jacob accepts and gives 300.
  aliceProjId <- acceptRequest jacob 300 jacobReqId
  -- 8. Alice checks the current status of her project.
  debug =<< getProjectStatus alice aliceProjId
  -- 9. Once the deadline has passed, Alice launches the project.
  coupons <- passTime (days 11) >> launchProject alice aliceProjId
  -- 10. The 3 contributors redeem their coupons.
  forA coupons $ uncurry redeemCoupon

twoProjects = do
  -- 0. Initializing users
  [alice,bob,judith] <- forA ["alice","bob","judith"] initializeUser
  -- 1. Configuring a deadline in 30 days
  deadline <- (`addDays` 30) . toDateUTC <$> getTime
  -- 2. Bob and Alice both create their projects
  aliceProjId <- createProject alice "AliceProject" 100_000 deadline
  bobProjId <- createProject bob "BobProject" 200_000 deadline
  -- 3. Bob and Alice both send contribution requests to some parties
  (_,[aliceBobReqId,_]) <- sendRequests alice aliceProjId [bob,judith]
  (bobProjId,_) <- sendRequests bob bobProjId [judith]
  -- 4. Bob wishes to check the current status of his requests
  debug =<< getRequestsStatus bob bobProjId
  -- 5. Judith queries all the requests that target her, and accept them
  mapA (acceptRequest judith 150_000) . (fst <$>) =<< query @ContributionRequest judith
  -- 6. Bob rejects the only requests he has
  aliceProjId <- rejectRequest bob aliceBobReqId
  -- 7. Bob searches for his project, as Judith has the projectId has changed when Judith contributed
  Some (bobProjId,_) <- queryContractKey @CFProject bob $ ProjectKey bob "BobProject"
  -- 8. Alices waits long enough, then launches her project
  passTime (days 40) >> launchProject alice aliceProjId
  -- 9. Bob checks for the current status of his project
  debug =<< getRequestsStatus bob bobProjId
  -- 10. Bob launches his project, although not fully funded
  launchProject bob bobProjId
  -- 11. Judith looks for her coupons, and redeems the ones that are a unsuccessful
  mapA_ (redeemCoupon judith) . (fst <$>) =<< queryFilter @Coupon judith (not . success)

wrongArchiveAttempt = do
  -- 0. Initializing users
  [alice,bob] <- forA ["alice","bob"] initializeUser
  -- 1. Alice creates her project
  aliceProjId <- createProject alice "AliceProject" 100_000 =<< (`addDays` 30) . toDateUTC <$> getTime    
  -- 2. Alice sends a contribution request to bob
  (_,[aliceToBobReqId]) <- sendRequests alice aliceProjId [bob]
  -- 3. Bob accepts and contributes 
  aliceProjId <- acceptRequest bob 50_000 aliceToBobReqId
  -- 4. Parties wait for the deadline to be reached
  passTime (days 40)
  -- 5. Alice attempts to archive the project without giving a coupon to bob
  submitMustFail alice $ archiveCmd aliceProjId

spamAttempt = do
  -- 0. Initializing users
  [alice,bob] <- forA ["alice","bob"] initializeUser  
  -- 1. Alice creates her project
  aliceProjId <- createProject alice "AliceProject" 100_000 =<< (`addDays` 30) . toDateUTC <$> getTime 
  -- 2. Alice sends a contribution request to bob
  (aliceProjId,[aliceToBobReqId]) <- sendRequests alice aliceProjId [bob]  
  -- 3. Bob refuses the request
  aliceProjId <- rejectRequest bob aliceToBobReqId
  -- 4. Alice attempts to spam bob with yet another request
  submitMustFail alice $ exerciseCmd aliceProjId $ SendRequests [bob]

negativeContribution = do
  -- 0. Initializing users
  [alice,bob] <- forA ["alice","bob"] initializeUser  
  -- 1. Alice creates her project
  aliceProjId <- createProject alice "AliceProject" 100_000 =<< (`addDays` 30) . toDateUTC <$> getTime 
  -- 2. Alice sends a contribution request to bob
  (aliceProjId,[aliceToBobReqId]) <- sendRequests alice aliceProjId [bob]     
  -- 3. Bob accepts the request
  aliceProjId <- acceptRequest bob 50_000 aliceToBobReqId
  -- 4. Bob decides that he can contribute even more
  aliceProjId <- contributeToProject bob aliceProjId 50_000
  -- 5. Bob regrets and attempt to reduce his contribution
  submitMustFail bob $ exerciseCmd aliceProjId $ Contribute bob (-50_000)

wrongRedeemingParty = do
  -- 0. Initializing users
  [alice,bob] <- forA ["alice","bob"] initializeUser
  -- 1. Alice creates her project
  aliceProjId <- createProject alice "AliceProject" 100_000 =<< (`addDays` 30) . toDateUTC <$> getTime    
  -- 2. Alice sends a contribution request to bob
  (_,[aliceToBobReqId]) <- sendRequests alice aliceProjId [bob]
  -- 3. Bob accepts and contributes 
  aliceProjId <- acceptRequest bob 50_000 aliceToBobReqId
  -- 4. Parties wait for the deadline to be reached
  passTime (days 40)
  -- 5. Alice launches her project
  [(_,bobCouponId)] <- launchProject alice aliceProjId
  -- 6. Alice attempts to redeem bob's coupon
  submitMustFail alice $ exerciseCmd bobCouponId Redeem