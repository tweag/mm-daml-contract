module Crowdfunding where

import DA.Map as Map
import DA.Set as Set
import DA.Time (time)
import DA.Optional (fromOptional)
import Data
import Utils

---------------------------
-- Projects to be funded --
---------------------------
template CFProject
    with
        -- Owner (creator) of the project
        owner: Party
        -- Name of the project
        name: Text
        -- Deadline until contributors can contribute
        deadline: Date
        -- Minimum amount to launch the project
        threshold: Int
        -- List of confirmed contributors
        contributors: Map Party Int
        -- Parties that have been contacted to fund this project
        requested: [Party]

    where
        -- The owner only can create or archive this project
        signatory owner
        -- All contributors can observe this contract, alongside parties that were requested to contribute
        -- This might (and will) contain duplicates, but I assume observers are just querried for membership
        observer (fst <$> Map.toList contributors) <> requested 
        -- The key is the one of the project
        key ProjectKey{owner,name}: ProjectKey
        -- The owner of the project is the reference for key unicity
        maintainer (getOwner key)
        -- Let's make sure that:
        -- - projects don't have empty names
        -- - threshold is strictly positive
        ensure name /= "" && threshold > 0

        -- ------------------------------------------------------------------------------------
        -- Checks for the current status of sent requests. For each request:                 --
        -- If the request still exists, returns its ID                                       --
        -- If the request no longer exists, returns True if it was accepted, False otherwise --
        ---------------------------------------------------------------------------------------
        -- Non consuming as it is purely a request --
        ---------------------------------------------
        nonconsuming choice GetRequestsStatus: [(Party, Either Bool (ContractId ContributionRequest))]
            controller owner
            do
                forA requested $ \target -> 
                    let project = ProjectKey{owner,name}
                        lookupKey = ContributionRequestKey{target,project}
                    in (target,) <$> 
                        (ifA 
                            (visibleByKey @ContributionRequest lookupKey)
                            (Right . fst <$> fetchByKey @ContributionRequest lookupKey)
                            (return $ Left $ target `Map.member` contributors))


        -------------------------------------------------------------------
        -- Checks for the current status of the project                  --
        -- Returns "InProgress" when the deadline is not yet reached     --
        -- Returns "Funded" when after the dealine and threshold reached --
        -- Returns "NotFunded" otherwise                                 --
        -------------------------------------------------------------------
        -- Non consuming as it is purely a request --
        ---------------------------------------------
        nonconsuming choice GetProjectStatus: ProjectStatus
            -- Only the owner can see the status of the project
            controller owner
            do
                currentTime <- getTime
                let currentAmount = sum (snd <$> Map.toList contributors)
                return $ 
                    if currentTime <= time deadline 23 59 59 
                        then InProgress $ intToDecimal currentAmount * 100.00 / intToDecimal threshold
                        else if currentAmount >= threshold 
                            then Funded 
                            else NotFunded

        ------------------------------------------------------------------------------
        -- Issues a contribution to the project.                                    --
        -- Initial contributions require the existence of a "ContributionRequest"   --
        -- after which it can be called at will to increase the contributed amount. --
        ------------------------------------------------------------------------------
        choice Contribute: ContractId CFProject
            with
                -- The user that wishes to contribute
                contributor: Party
                -- The contribution amount
                amount: Int
            -- Any party can theoretically exercise this choice to contribute
            controller contributor
            do
                currentTime <- getTime
                assertMsg "Contributions must be strictly positive" $ amount > 0
                assertMsg "Contributions must be done before the deadline" $ currentTime <= time deadline 23 59 59
                assertMsg "This contribution was not requested" $ contributor `elem` requested

                create this with
                    contributors = Map.alter (Some . (+amount) . (fromOptional 0)) contributor contributors

        --------------------------------------------------------
        -- Launches a project, giving coupons to contributors --
        --------------------------------------------------------
        -- Postconsuming, as we exercise "GetCurrentStatus" --
        -- before archiving the contract.                   --
        ------------------------------------------------------
        postconsuming choice Launch: [(Party, ContractId Coupon)]
            -- The owner can launch the project
            controller owner
            do
                currentStatus <- exercise self GetProjectStatus
                assertMsg "Launching the project can only be done after the deadline" $ not $ inProgress currentStatus

                let success = currentStatus == Funded
                    project = ProjectKey{owner, name}

                forA (Map.toList contributors) $ \(contributor, amount) -> 
                    (contributor,) <$> create Coupon{contributor, project, amount, success}

        -----------------------------------------------------------------
        -- Creates contribution requests for the input list of parties --
        -----------------------------------------------------------------
        choice SendRequests: (ContractId CFProject, [ContractId ContributionRequest])
            with 
                parties: [Party]
            controller owner
            do
                currentTime <- getTime

                assertMsg "Requests should be sent to separate peers." $ length parties == Set.size (Set.fromList parties)
                assertMsg "Contributors should not receive new requests" $ all (`notElem` parties) (fst <$> Map.toList contributors)
                assertMsg "Sending requests must be done before the deadline" $ currentTime <= time deadline 23 59 59
                assertMsg "You must send requests to at least 1 party." $ not $ Prelude.null parties

                -- Creation of an updated version of this with the requests update
                projectCid <- create this with
                    requested = requested <> parties

                let project = ProjectKey{owner,name}

                -- Creation of the requests for each party
                requestsCids <- forA parties $ \target -> 
                    create ContributionRequest{project,target}

                return (projectCid, requestsCids)

------------------------------------------
-- Coupons of contribution to a project --
------------------------------------------
template Coupon
    with 
        -- Owner of the coupon
        contributor: Party
        -- Project that was funded
        project: ProjectKey
        -- Amount of the participation
        amount: Int
        -- Whether the project was successfully funded
        success: Bool

    where
        -- The coupon will be created by the project owner upon project launching
        signatory getOwner project
        -- The coupon whould be visible by the contributor
        observer contributor

        ------------------------
        -- Redeems the coupon --
        -------------------------------------------------------------------------------
        -- For now, redeeming the coupon does nothing. We could imagine creating     --
        -- a use case for those, such as having funding platforms on top of projects --
        -- with monthly top 10 contributors getting other kinds of rewards.          --
        -------------------------------------------------------------------------------
        choice Redeem: ()
            -- The contributor is the one redeeming the coupon
            controller contributor
            do return ()

----------------------------------------
-- Contribution requests to prospects --
----------------------------------------
template ContributionRequest 
    with
        -- Project that sent this contribution request
        project: ProjectKey
        -- The peer that was asked to fund the project
        target: Party

    where
        -- The project owner creates the contribution request
        signatory getOwner project
        -- The target should see this contract
        observer target
        -- The request is depicted by the project and the target
        key ContributionRequestKey{target, project}: ContributionRequestKey
        -- The owner of the project is the reference point
        maintainer getOwner key

        ----------------------------------------------------------------------------
        -- Respond to the request. Provide None to refuse, Some x to contribute x --
        ----------------------------------------------------------------------------
        choice Respond: ContractId CFProject
            with
                amount: Optional Int
            -- The target can respond to the request
            controller target
            do 
                optionalA
                    (lookupByKey @CFProject project)
                    (abort "This contribution request refers to a non-existing project.")
                    (optional 
                        return
                        (\amount' projId -> exercise projId $ Contribute target amount')
                        amount)
